#!/bin/bash

# invocation: dictpopup [word]
# - If no argument provided, the selection is used

#### Settings
readonly ANKI_DECK=${ANKI_DECK:-Japanese::sentences}
readonly ANKI_MODEL=${ANKI_MODEL:-Japanese sentences}
readonly ANKI_SENTENCE_FIELD=${ANKI_SENTENCE_FIELD:-SentKanji}
readonly ANKI_WORD_FIELD=${ANKI_WORD_FIELD:-VocabKanji}
readonly ANKI_DEFINITION_FIELD=${ANKI_DEFINITION_FIELD:-VocabDef}

HTML_SUPPORT=0 # Set to 1 for HTML formatting through lynx
ANKI_SUPPORT=1 # Set to 1 for anki cards with middle click
ANKI_SEARCH_AFTER_ADD=1
NUKE_NEWLINES=1
NUKE_SPACES=1
####

sdcv_() {
	sdcv -n --utf8-output -e "$1"
}

die() {
	notify-send "$1"
	exit 1
}

checkDependencies() {
	command -v sdcv &>/dev/null || die "sdcv not installed."
	command -v popup &>/dev/null || die "The popup binary is not accessible."
	command -v xclip &>/dev/null || die "xclip is not installed."
	if [ $ANKI_SUPPORT -eq 1 ] && ! command -v clipnotify &>/dev/null; then
		echo "clipnotify not installed. Anki support disabled"
		ANKI_SUPPORT=0
	fi
	if [ $HTML_SUPPORT -eq 1 ] && ! command -v lynx &>/dev/null; then
		echo "Lynx not installed. HTML support disabled"
		HTML_SUPPORT=0
	fi
}

__escape_json() {
	local text=$1
	text=${text//'"'/'&quot;'}
	text=${text//$'\n'/'<br>'}
	echo "$text"
}

__ankiconnect_request() {
	curl -fsS localhost:8765 -X POST -d "$1"
}

anki_search() {
	local -r request='{
		"action": "guiBrowse",
		"version": 6,
		"params": {
		    "query": "nid:<note_id>"
		}
	}'
	__ankiconnect_request "${request/<note_id>/$1}"
}

create_anki_card() {
	local word
	word=$(__escape_json "$1")
	local definition=$2
	# Remove first line if it contains 【
	if echo "$definition" | head -n 1 | grep -q "【"; then
		definition=$(echo "$definition" | tail -n +2)
	fi
	definition=$(__escape_json "$definition")

	notify-send "Please select the sentence"
	clipnotify -s clipboard && sentence=$(xclip -o -sel clip 2>/dev/null)
	[ $NUKE_NEWLINES -eq 1 ] && sentence=${sentence//$'\n'/}
	[ $NUKE_SPACES -eq 1 ] && sentence=${sentence//[ 　]/}
	echo "$sentence"
	sentence=${sentence/$word/<b>$word</b>}
	sentence=$(__escape_json "$sentence")

	local request
	request=$(
		cat <<-EOF
			{
			    "action": "addNote",
			    "version": 6,
			    "params": {
				"note": {
				    "deckName": "$ANKI_DECK",
				    "modelName": "$ANKI_MODEL",
				    "fields": {
					"$ANKI_SENTENCE_FIELD": "$sentence",
					"$ANKI_WORD_FIELD": "$word",
					"$ANKI_DEFINITION_FIELD": "$definition"
				    },
				    "options": {
					"allowDuplicate": true
				    },
				    "tags": []
				}
			    }
			}
		EOF
	)

	if output=$(__ankiconnect_request "$request" 2>&1); then
		if [ $ANKI_SEARCH_AFTER_ADD -eq 1 ]; then
			note_id=$(echo "$output" | grep -o '"result": [0-9]*' | cut -d ' ' -f 2)
			if [ -n "$note_id" ]; then
				anki_search "$note_id"
			else
				die "Error extracting note id."
			fi
		fi
	else
		die "$output"
	fi
}

lookup() {
	word=$1
	export dict_entry
	dict_entry=$(sdcv_ "$word" | format_output)

	if [ -z "$dict_entry" ]; then
		while read -r line; do
			dict_entry=$(sdcv_ "$line" | format_output)
			[ -n "$dict_entry" ] && break
		done <<INPUT
		$(deinflector "$word")
INPUT
	fi

	echo "$dict_entry"
}

main() {
	word=${1:-$(xclip -o)}
	dict_entry=$(lookup "$word")
	[ -z "$dict_entry" ] && die "No results"

	[ $HTML_SUPPORT -eq 1 ] && dict_entry=$(lynx -dump -stdin -assume_charset=UTF-8 -display_charset=UTF-8 <<<"$dict_entry")

	printf "%s" "$dict_entry" | popup

	[ $? -eq 2 ] && [ $ANKI_SUPPORT -eq 1 ] && create_anki_card "$word" "$dict_entry"
}

checkDependencies
main "$@"
