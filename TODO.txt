High priority
- integrate database builder into this git repo
- create man page
- Import ankiconnectC as a git submodule
- Check error handling for missing config
- Search for card in anki gui by clicking on the dot. Auto open first result
- publish on AUR
- package with autotools

Mid priority
- Implement some error checking macros. Especially for malloc
- Properly use gapplication (as in sending notifications right now)
- Consider using GTask for loading dictionary information in the backround and running the popup in the main thread
- Leave "SearchField" option empty to search in whole collection
- Convert selected word and sentence to UTF-8 (for Windows support)
- Improve deinflection
- Kanjify the word in the copied sentence according to the dictionary entry
- Remove trailing spaces from user settings

Low priority
- Refactor popup.c
- merge unistr and deinflector into 1 file
- replace unistr with GString
- Skip certain lines on definition add (without selection)
  - しず か （しづ—） [1]【静か・▽閑か】
  -（形動）〔文〕ナリ
- Switch possibleEntries to struct and change FieldMappings to Strings instead of numbers
- Add unit tests
- write a gui config tool
  - Select dictionaries
  - Choose dictionary sort order
  - build database
  - change general config

Possible ideas:
- "Add this entry"-button before every entry
- Save ankicard as csv if push to ankiconnect failed
- Write a browser addon which enables using dictpopup just by pressing Shift (like yomichan)

To check:
- definflector assumes that constant strings given in the code are utf8 encoded. This might be wrong if compiled on windows for example.

database related:
- Put length of longest entry into database under LENGTH_OF_LONGEST_ENTRY
- Try: One LMDB database for keys -> ids mapping (dup entries) + 1 LMDB DB for id -> dictentry mapping
